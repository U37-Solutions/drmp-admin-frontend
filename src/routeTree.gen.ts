/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthorizedRouteRouteImport } from './routes/_authorized/route'
import { Route as AuthorizedAboutRouteImport } from './routes/_authorized/about'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthorizedRouteRoute = AuthorizedRouteRouteImport.update({
  id: '/_authorized',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthorizedAboutRoute = AuthorizedAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AuthorizedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/about': typeof AuthorizedAboutRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/about': typeof AuthorizedAboutRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authorized': typeof AuthorizedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_authorized/about': typeof AuthorizedAboutRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/about'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/about'
  id: '__root__' | '/_authorized' | '/login' | '/_authorized/about'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthorizedRouteRoute: typeof AuthorizedRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authorized': {
      id: '/_authorized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthorizedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authorized/about': {
      id: '/_authorized/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AuthorizedAboutRouteImport
      parentRoute: typeof AuthorizedRouteRoute
    }
  }
}

interface AuthorizedRouteRouteChildren {
  AuthorizedAboutRoute: typeof AuthorizedAboutRoute
}

const AuthorizedRouteRouteChildren: AuthorizedRouteRouteChildren = {
  AuthorizedAboutRoute: AuthorizedAboutRoute,
}

const AuthorizedRouteRouteWithChildren = AuthorizedRouteRoute._addFileChildren(
  AuthorizedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthorizedRouteRoute: AuthorizedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
